#!/bin/sh
#-------------------------------------------------------------------------------------------------#
# AUTHOR:  Andrew Michaud - https://andrewmichaud.com                                             #
# FILE:    setup                                                                                  #
# PURPOSE: script to deploy config files and scripts in this repo.                                #
# UPDATED: 2016-06-22                                                                             #
# LICENSE: ISC                                                                                    #
#-------------------------------------------------------------------------------------------------#

# TODO This isn't quite rigorous enough in checking to be sure it's not trying to symlink files
# that already exist.
# Fix that.

# FORCE=1

#-------------------------------------------------------------------------------------------------#
###################################### GET XDG VARS ###############################################
#-------------------------------------------------------------------------------------------------#
echo "Determining necessary XDG env vars..."
echo

# Ensure vars are set.
OS="$(uname -s)"
if [ "$OS" = "Darwin" ]; then
    DEFAULT_CONFIG="$HOME/Library/Preferences"
    DEFAULT_CACHE="$HOME/Library/Caches"
    DEFAULT_DATA="$HOME/Library"

elif [ "$OS" = "Linux" ]; then
    DEFAULT_CONFIG="$HOME/.config"
    DEFAULT_CACHE="$HOME/.cache"
    DEFAULT_DATA="$HOME/.local/share"

else
    echo "OS $OS currently unsupported!"
    exit 1
fi
XDG_CONFIG_HOME=${XDG_CONFIG_HOME-${DEFAULT_CONFIG}}
echo "XDG_CONFIG_HOME is $XDG_CONFIG_HOME"

XDG_CACHE_HOME=${XDG_CACHE_HOME-${DEFAULT_CACHE}}
echo "XDG_CACHE_HOME set to $XDG_CACHE_HOME."

XDG_DATA_HOME=${XDG_DATA_HOME-${DEFAULT_DATA}}
echo "XDG_DATA_HOME set to $XDG_DATA_HOME"

# Create all directories.
if [ -d "$XDG_CONFIG_HOME" ]; then
    if [ -L "$XDG_CONFIG_HOME" ]; then
        echo "Config DIR $XDG_CONFIG_HOME exists as a symlink."
    else
        echo "Config DIR $XDG_CONFIG_HOME exists as a directory."
    fi

else
    echo "Config DIR $XDG_CONFIG_HOME does not exist, creating."
    mkdir -p "$XDG_CONFIG_HOME"
fi

if [ -d "$XDG_CACHE_HOME" ]; then
    if [ -L "$XDG_CACHE_HOME" ]; then
        echo "Cache DIR $XDG_CACHE_HOME exists as a symlink."
    else
        echo "Cache DIR $XDG_CACHE_HOME exists as a directory."
    fi

else
    echo "Cache DIR $XDG_CACHE_HOME does not exist, creating."
    mkdir -p "$XDG_CACHE_HOME"
fi

if [ -d "$XDG_DATA_HOME" ]; then
    if [ -L "$XDG_DATA_HOME" ]; then
        echo "Data DIR $XDG_DATA_HOME exists as a symlink."
    else
        echo "Data DIR $XDG_DATA_HOME exists as a directory."
    fi

else
    echo "Data DIR $XDG_DATA_HOME does not exist, creating."
    mkdir -p "$XDG_DATA_HOME"
fi

#-------------------------------------------------------------------------------------------------#
#################################### GET OTHER VARS ###############################################
#-------------------------------------------------------------------------------------------------#
echo
echo "Determining other necessary env vars..."
echo

# Grab directory of git repo.
GIT_DIR="$(pwd -P)"
echo "GIT_DIR is $GIT_DIR"

# Grab places we'll put scripts and config files.
GIT_CONFIG_HOME="$GIT_DIR/config"

#-------------------------------------------------------------------------------------------------#
################################### DEPLOY CONFIG FILES ###########################################
#-------------------------------------------------------------------------------------------------#
echo
echo "Deploying config files..."
echo

# Deploy config files.
echo "Linking all config files in each directory in $GIT_CONFIG_HOME into $XDG_CONFIG_HOME"
DIRS="$(find "$GIT_CONFIG_HOME" -type d -maxdepth 1 -mindepth 1)"
for DIR in $DIRS; do
    DIR_NAME="$(basename "$DIR")"
    echo "On config dir $DIR"

    if [ ! -d "$XDG_CONFIG_HOME/$DIR_NAME" ]; then
        echo "Creating config directory $DIR_NAME"
        mkdir "$XDG_CONFIG_HOME/$DIR_NAME"
    elif [ -f "$XDG_CONFIG_HOME/$DIR_NAME" ]; then
        echo "Found $DIR_NAME as file in $XDG_CONFIG_HOME already."
    elif [ -d "$XDG_CONFIG_HOME/$DIR_NAME" ]; then
        echo "Found $DIR_NAME as directory in $XDG_CONFIG_HOME already."
    else
        echo "Found $DIR_NAME as symlink in $XDG_CONFIG_HOME already."
    fi

    files="$(find "$DIR" -maxdepth 1 -mindepth 1)"
    for file in $files; do
        FILE_NAME="$(basename "$file")"
        if [ ! -L "$XDG_CONFIG_HOME/$DIR_NAME/$FILE_NAME" ]; then
            echo "Linking $file into $XDG_CONFIG_HOME/$DIR_NAME/$FILE_NAME"
            ln -s "$file" "$XDG_CONFIG_HOME/$DIR_NAME/$FILE_NAME"
        elif [ -f "$XDG_CONFIG_HOME/$DIR_NAME/$FILE_NAME" ]; then
            echo "$FILE_NAME already exists as a file in $XDG_CONFIG_HOME/$DIR_NAME"
        else
            echo "$FILE_NAME already exists as a symlink in $XDG_CONFIG_HOME/$DIR_NAME"

            if [ ! -z "$FORCE" ]; then
                echo "FORCE is set, removing symlink and re-symlinking."
                rm "$XDG_CONFIG_HOME/$DIR_NAME/$FILE_NAME"
                ln -s "$file" "$XDG_CONFIG_HOME/$DIR_NAME/$FILE_NAME"
            fi
        fi
    done
done

#-------------------------------------------------------------------------------------------------#
############################################# OTHER ###############################################
#-------------------------------------------------------------------------------------------------#

# Make folders/files expected by the configs we just created.
# TODO clean this up to use arrays somehow.
mkdir -p "$XDG_CACHE_HOME/less"
mkdir -p "$XDG_CACHE_HOME/tex/mfvar"
mkdir -p "$XDG_CACHE_HOME/vim/backup"
mkdir -p "$XDG_CACHE_HOME/vim/swap"
mkdir -p "$XDG_CACHE_HOME/zsh/"

touch "$XDG_CACHE_HOME/less/hist"
touch "$XDG_CACHE_HOME/zsh/history"
