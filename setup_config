#!/usr/bin/env python3

import argparse
import os
import platform
import sys

# Make folders/files expected by the configs we just created.
NEEDED_DIRS = [
    "less",
    os.path.join("tex", "mfvar"),
    os.path.join("vim", "backup"),
    os.path.join("vim", "swap"),
    os.path.join("nvim", "swap"),
    os.path.join("nvim", "backup"),
    os.path.join("nvim", "log"),
    "zsh",
]

NEEDED_FILES = [
    os.path.join("less", "hist"),
    os.path.join("zsh", "history"),
    os.path.join("nvim", "log", "nvimlog"),
]


def run(*, force):
    """run script-linking script."""

    print(
        "determining necessary XDG env vars..."
        "\n"
    )

    home = os.path.expanduser("~")
    system_os = platform.system()

    # set sensible defaults appropriately for OS
    if system_os == "Darwin":
        xdg_cache_home_default = os.path.join(home, "Library", "Caches")
        xdg_config_home_default = os.path.join(home, "Library", "Preferences")

    elif system_os == "Linux" or os == "FreeBSD":
        xdg_cache_home_default = os.path.join(home, ".cache")
        xdg_config_home_default = os.path.join(home, ".config")

    else:
        print(f"OS {system_os} currently unsupported!")
        sys.exit(1)

    xdg_cache_home = os.environ.get("XDG_CACHE_HOME", xdg_cache_home_default)
    xdg_config_home = os.environ.get("XDG_CONFIG_HOME", xdg_config_home_default)

    print(f"XDG_CONFIG_HOME set to {xdg_config_home}.")
    print(f"XDG_CACHE_HOME set to {xdg_cache_home}.")

    for directory in [xdg_cache_home, xdg_config_home]:
        if os.path.isdir(directory):
            print(f"dir {directory} exists as a directory, good")

        elif os.path.isfile(directory):
            print(f"dir {directory} is a file! please remove it")
            sys.exit(1)

        else:
            print(f"dir {directory} does not exist, creating...")
            os.makedirs(directory)

    print("directories are ready!")

    configs_dir = os.path.join(
        os.path.dirname(os.path.realpath(__file__)),
        "config",
    )

    print(
        "\n"
        f"linking all configs in {configs_dir} into {xdg_config_home}..."
        "\n"
    )

    # go through every config directory in
    # src/git/config/config
    config_entry_dirs = sorted([
        os.path.join(configs_dir, dire)
        for dire in os.listdir(configs_dir)
        if os.path.isdir(os.path.join(configs_dir, dire))
    ])
    for config_entry in config_entry_dirs:

        print(
            "\n"
            f"on entry {config_entry}"
            "\n"
        )
        config_basename = os.path.basename(config_entry)

        # ensure a directory is present wherever we are dumping
        # these config files.
        # if there's a link or symlink instead, bail.
        proposed_path = os.path.join(xdg_config_home, config_basename)
        if os.path.isfile(proposed_path) or os.path.islink(proposed_path):
            print(
                f"found {config_basename} as file or link at {proposed_path}. "
                "Skipping it, please remove."
            )
            continue

        elif not os.path.isdir(proposed_path):
            print(f"creating directory {config_basename} at {proposed_path}")
            os.mkdir(proposed_path)

        else:
            print(f"directory {proposed_path} already exists, great!")

        # go through every FILE in each config directory.
        # we'll want to symlink these into the directory we made under
        # XDG_CONFIG_HOME
        config_files = sorted([
            os.path.join(config_entry, file)
            for file in os.listdir(config_entry)
            if os.path.isfile(os.path.join(config_entry, file)) or \
            os.path.islink(os.path.join(config_entry, file))
        ])

        for file in config_files:
            file_basename = os.path.basename(file)

            print(f"attempting to create a link for {file}")

            proposed_link_name = os.path.join(proposed_path, file_basename)

            if os.path.isdir(proposed_link_name):
                print(
                    f"for some reason, {proposed_link_name} exists as a directory. "
                    "skipping this file."
                )
                continue

            elif os.path.islink(proposed_link_name) and not force:
                print(
                    f"{proposed_link_name} already exists as a link and force is off. "
                    "skipping."
                )
                continue

            elif os.path.islink(proposed_link_name) and force:
                print(
                    f"{proposed_link_name} already exists as a link and force is on. "
                    f"OVERWRITING! linking {file} -> {proposed_link_name}"
                )

                os.remove(proposed_link_name)
                os.symlink(file, proposed_link_name)

            elif os.path.isfile(proposed_link_name):
                print(f"{proposed_link_name} exists as a file already. skipping.")
                continue

            else:
                os.symlink(file, proposed_link_name)

    print(
        "\n"
        "creating needed directories"
        "\n"
    )
    for dire in NEEDED_DIRS:

        print(f"working on needed directory {dire}")
        joined = os.path.join(xdg_cache_home, dire)
        if os.path.isfile(joined) or os.path.islink(joined):
            print(f"expected {joined} to not exist, but it's a file or a link. skipping.")
            continue

        elif os.path.isdir(joined):
            print(f"{joined} exists as a directory. skipping.")
            continue

        elif not os.path.isdir(joined):
            os.mkdir(joined)
            print(f"created directory {joined}")

    print(
        "\n"
        "creating needed files"
        "\n"
    )
    for file in NEEDED_FILES:

        print(f"working on needed file {file}")
        joined = os.path.join(xdg_cache_home, file)
        if os.path.isdir(joined) or os.path.islink(joined):
            print(f"expected {joined} to not exist, but it's a directory or a link. skipping.")
            continue

        elif os.path.isfile(joined):
            print(f"{joined} exists as a file. skipping.")
            continue

        elif not os.path.isdir(joined):
            open(joined, "a").close()
            print(f"created file {joined}")

    print("\ndone!")


def main():
    parser = argparse.ArgumentParser(
        description="link config files from repo into $XDG_CONFIG_HOME",
    )

    parser.add_argument(
        "--force",
        action="store_true",
        help=(
            "overwrite existing symlinks in $XDG_CONFIG_HOME subdirs when we are "
            "symlinking files from this git repo."
        ),
        default=False,
    )

    args = parser.parse_args()

    run(force=args.force)


if __name__ == "__main__":
    main()
